from create_bot import dp
from data_base import sqlite_db
from keyboards import inline_kb_impress, inline_kb_active
import difflib
import datetime
from aiogram.types import  InlineKeyboardButton, InlineKeyboardMarkup

def similarity(s1, s2):
  normalized1 = s1.lower()
  normalized2 = s2.lower()
  matcher = difflib.SequenceMatcher(None, normalized1, normalized2)
  return matcher.ratio()

async def send_invoice_message(user_id, send_id):
    values = list(await sqlite_db.get_profile(user_id))
    age = datetime.datetime.now().year - int(values[10].split('.')[2])
    format = str()
    if values[9]:
        format = '–û–Ω–ª–∞–π–Ω'
    else :
        format = '–û—Ñ—Ñ–ª–∞–π–Ω'
    card = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—à—ë–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, —Å–ø–∏—à–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤ —É–¥–æ–±–Ω–æ–π –¥–ª—è –≤–∞—Å —Å–æ—Ü—Å–µ—Ç–∏, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—èü§ù\n‚è¨\n\n{values[2]} –∏–∑ –≥–æ—Ä–æ–¥–∞ {values[4]}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n\nTelegram: {values[1]}\n–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å: {values[5]}\n\n–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è: \
{values[6]}\n\n–ó–∞—Ü–µ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {values[7]}\n\n–¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PRIDE CONNECT: {values[11]}\n\n–§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏: {format}\n–û—Ç –≤—Å—Ç—Ä–µ—á–∏ –æ–∂–∏–¥–∞–µ—Ç: {values[8]}'      
    try:
        inline_keyboard = InlineKeyboardMarkup(resize_keyboard=True).row(InlineKeyboardButton(text=f'–ù–∞–ø–∏—Å–∞—Ç—å {values[2]}', url='https://t.me/' + values[1][1::]))
        # await dp.bot.send_message(send_id, text + '–í–æ—Ç —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –Ω–∞–ø–∏—à–∏ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å:\n‚è¨\n\n' + card, reply_markup=inline_keyboard)
        await dp.bot.send_photo(send_id, photo=await sqlite_db.get_photo(user_id), caption=card, reply_markup=inline_keyboard)
        photo = open('./content/photo/right.jpeg', 'rb')
        await dp.bot.send_photo(send_id, photo=photo)
    except:
        print('–Ø –≤ –±–ª–æ–∫–µ')
    
async def make_pairs():
    try:
        # await sqlite_db.check_block()
        await sqlite_db.clear_temp_users()
        await sqlite_db.delete_current_pairs()
        offline_users = await sqlite_db.get_offline_users() # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (id + town)
        online_users = await sqlite_db.get_online_users() # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ id)
        dict_pairs = dict(str()) # —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏

        offline_dict = {} # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ –∑–∞–Ω–æ—Å–∏–º —Ç—É–¥–∞ –≤—Å–µ—Ö –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥–∞–º
        for user in offline_users: 
            town = user[1].lower()
            if offline_dict.get(town) == None:
                offline_dict[town] = list()
            offline_dict[town].append(user[0])

        for town in offline_dict.keys(): # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã
            town_id = list(offline_dict[town]) # –∏–Ω–∏—Ü–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –≥–æ—Ä–æ–¥–µ town
            for id in range(len(town_id)): # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä—É –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                max_sim = -1    # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å
                max_index = id  # –∏–Ω–¥–µ–∫—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è)
                for pair_id in range(len(town_id)):
                    if town_id[id] in dict_pairs.values():
                        break
                    if id == pair_id or town_id[pair_id] in dict_pairs.keys() or town_id[pair_id] in dict_pairs.values() or await sqlite_db.is_last_pair(town_id[id], town_id[pair_id]):
                        continue   
                    s1 = await sqlite_db.get_hooks(town_id[id])
                    s2 = await sqlite_db.get_hooks(town_id[pair_id])
                    sim = similarity(s1, s2) # –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ 2 —Å—Ç—Ä–æ–∫ 
                    if sim > max_sim:
                        max_index = pair_id
                        max_sim = sim
                if max_index != id:
                    dict_pairs[town_id[id]] = town_id[max_index]
                    await sqlite_db.append_pair(town_id[id], town_id[max_index]) # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    offline_dict[town].remove(town_id[id])
                    offline_dict[town].remove(town_id[max_index])

        online_id = list() # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞ –≤—Å–µ –æ–Ω–ª–∞–π–Ω id
        for town in offline_dict.keys():
            users = offline_dict[town]
            for user in users:
                online_id.append(user)

        for user in online_users:
            online_id.append(user[0])

        for id in range(len(online_id)):
            max_sim = -1
            max_index = id
            for pair_id in range(len(online_id)):
                if online_id[id] in dict_pairs.values():
                    break
                if id == pair_id or online_id[pair_id] in dict_pairs.keys() or online_id[pair_id] in dict_pairs.values() or await sqlite_db.is_last_pair(online_id[id], online_id[pair_id]):
                    continue     
                s1 = await sqlite_db.get_hooks(online_id[id])
                s2 = await sqlite_db.get_hooks(online_id[pair_id])
                sim = similarity(s1, s2)
                if sim > max_sim:
                    max_index = pair_id
                    max_sim = sim
            if max_index != id:
                dict_pairs[online_id[id]] = online_id[max_index]
                await sqlite_db.append_pair(online_id[id], online_id[max_index])

        extra_pairs = 0
        if len(dict_pairs) * 2 != len(offline_users) + len(online_users):
            users_without_pair = await sqlite_db.find_users_without_pair()
            if users_without_pair == None:
                extra_pairs = 0
            else:
                for id in users_without_pair:
                    await sqlite_db.try_make_pair(id)
                    try:
                        await dp.bot.send_message(id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä—É —Å—Ä–∞–∑—É\n–ú—ã –∑–∞–Ω–µ—Å—ë–º –≤–∞—Å –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä—É —Å–Ω–æ–≤–∞!')
                    except:
                        print('–Ø –≤ –±–ª–æ–∫–µ')
                extra_pairs = await make_extra_pairs()


        for key, value in dict_pairs.items():
            await send_invoice_message(key, value)
            await send_invoice_message(value, key)

        return len(dict_pairs) + extra_pairs
    except Exception:
        await dp.bot.send_message(555581588, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –ø–∞—Ä')
async def ask_impress():
    users = await sqlite_db.get_users()
    if len(users) == 0:
        return
    count = 0
    for user in users:
        counter = 0
        for pair in reversed(user[1]):
            if user[2][-1 - counter] == 0:
                pair_user = await sqlite_db.get_profile(pair)
                try:
                    await dp.bot.send_message(user[0], f'–ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å {pair_user[2]} –∏–∑ –≥–æ—Ä–æ–¥–∞ {pair_user[4]}?\nTg : {pair_user[1]}', reply_markup=inline_kb_impress)
                    count += 1
                except:
                    pass
            counter += 1
    return count
            
async def make_extra_pairs():
    users = await sqlite_db.get_extra_users()
    dict_pairs = dict(str())
    for id in range(len(users)):
        max_sim = -1
        max_index = id
        for pair_id in range(len(users)):
            if users[id] in dict_pairs.values():
                break
            if id == pair_id or users[pair_id] in dict_pairs.keys() or users[pair_id] in dict_pairs.values() or await sqlite_db.is_last_pair(users[id], users[pair_id]):
                continue     
            s1 = await sqlite_db.get_hooks(users[id])
            s2 = await sqlite_db.get_hooks(users[pair_id])
            sim = similarity(s1, s2)
            if sim > max_sim:
                max_index = pair_id
                max_sim = sim
        if max_index != id:
            dict_pairs[users[id]] = users[max_index]
            await sqlite_db.append_pair(users[id], users[max_index])
    for key, value in dict_pairs.items():
        await sqlite_db.delete_from_temp_users(key)
        await sqlite_db.delete_from_temp_users(value)
        await send_invoice_message(key, value)
        await send_invoice_message(value, key)
    
    return len(dict_pairs)
    
    
async def is_active():
    users = await sqlite_db.get_paid_users()
    counter = 0
    for user in users:
        try:
            await dp.bot.send_message(user, '–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è - –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!\n–ò—Å–∫–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?', reply_markup=inline_kb_active)
            counter += 1
        except:
            print('–Ø –≤ –±–ª–æ–∫–µ')
            
    return counter

async def update_paid():
    await sqlite_db.update()